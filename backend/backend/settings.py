"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
import os.path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# AbuseIPDB Configuration
ABUSEIPDB_API_KEY = '31f01f464614facb17d33b66473e3fc25184b0c5e20d0379f82a5c978220570ef366cb8e5bf8afa3'  # Replace with your actual API key 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-v25w%nnkq)#wq1m3p)jau80z!y_-c3fcjhd24vuhd_l40$tmn9')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), 
]

ALLOWED_HOSTS = ['127.0.0.1','osiriswatch-aqbpa6chc3brc5fe.westeurope-01.azurewebsites.net','localhost']
CSRF_TRUSTED_ORIGINS = [
    'https://osiriswatch-aqbpa6chc3brc5fe.westeurope-01.azurewebsites.net',
    'http://127.0.0.1:8000',
    'http://localhost:8000'
]

DATA_UPLOAD_MAX_NUMBER_FIELDS = 2000
EMAIL_BACKEND = 'accounts.custom_email_backend.NonSSLVerifiedEmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'hossamaman33@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'fveq tpzi gwgn emxn')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# تعزيز إعدادات الأمان
SESSION_COOKIE_SECURE = True  
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 60 * 60 * 8  # 8 ساعات
SESSION_SAVE_EVERY_REQUEST = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# CSRF Exempt URLs
CSRF_EXEMPT_URLS = [
    # API paths
    '/api/create_network_flow/',
    '/api/network_sessions/',
    '/api/network_sessions/create/',
    '/api/create_attack_type/',
    '/api/create_agent/',
    '/api/create_alert/',
    # Predictions paths
    '/predictions/create_network_flow/',
    '/predictions/network_sessions/',
    '/predictions/network_sessions/create/',
    '/predictions/create_attack_type/',
    '/predictions/create_agent/',
    '/predictions/create_alert/',
]

# إعدادات الأمان الإضافية للإنتاج
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # سنة
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ASGI_APPLICATION = "realtime_prediction.asgi.application"
STATIC_ROOT = BASE_DIR / 'staticfiles' 
MEDIA_ROOT = BASE_DIR / 'media'  
MEDIA_URL = '/media/'


INSTALLED_APPS = [
    'rest_framework',
    'accounts',
    'channels',
    'predictions',
    'corsheaders',
    'django.contrib.postgres',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_simplejwt.token_blacklist',
    'api',
]

# إضافة تكوين الذاكرة المؤقتة
# التحقق من وجود django-redis
try:
    import django_redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False

# تكوين الذاكرة المؤقتة
if REDIS_AVAILABLE:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/1",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": "",  # إذا كان Redis يتطلب كلمة مرور
            },
            "KEY_PREFIX": "osiris"
        }
    }
else:
    # استخدم الذاكرة المؤقتة المحلية إذا لم يكن Redis متوفراً
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }

# مدة صلاحية الذاكرة المؤقتة الافتراضية (5 دقائق)
CACHE_TTL = 60 * 5

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'backend.csrf_exempt.CustomCsrfViewMiddleware',  # Replace the default CSRF middleware
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # إضافة وسيط تقييد معدل الطلبات
    'api.middleware.RateLimitMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True  

# Update CORS settings to be more specific
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # إضافة إعدادات الأمان وتقييد معدل الطلبات
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day',
        'auth': '20/min',  # طلبات المصادقة
    },
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ) if not DEBUG else (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    # تعزيز الأمان
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # تقليل مدة الصلاحية إلى 30 دقيقة
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # تقليل مدة الصلاحية إلى يوم واحد
    'ROTATE_REFRESH_TOKENS': True,                  # تدوير tokens التحديث
    'BLACKLIST_AFTER_ROTATION': True,               # إدراج tokens التحديث القديمة في القائمة السوداء
    'UPDATE_LAST_LOGIN': True,                      # تحديث وقت آخر تسجيل دخول
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=30),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'accounts.context_processors.user_data', 
            ],
        },
    },
]
WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', ''),
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', ''),
        'PORT': os.getenv('DB_PORT', '5432'),
        # إضافة إعدادات أمان قاعدة البيانات
        'OPTIONS': {
            'sslmode': 'require' if not DEBUG else 'prefer',
        },
        # إضافة إعدادات أداء قاعدة البيانات
        'CONN_MAX_AGE': 60,  # الحفاظ على الاتصالات مفتوحة لمدة 60 ثانية
    }
}

if not DATABASES['default']['NAME']:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 10,  # زيادة الحد الأدنى لطول كلمة المرور
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        # إضافة مدقق إضافي لتعزيز قوة كلمات المرور
        'NAME': 'accounts.validators.SymbolPasswordValidator',
    }
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# إعدادات تسجيل النظام
# إنشاء مجلد logs إذا لم يكن موجوداً
logs_dir = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(logs_dir):
    try:
        os.makedirs(logs_dir)
    except OSError as e:
        print(f"Warning: Could not create logs directory: {e}")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(logs_dir, 'osiris.log'),
            'formatter': 'verbose',
            # إضافة وضع إنشاء الملف إذا لم يكن موجوداً
            'mode': 'a',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'] if DEBUG else ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'] if DEBUG else ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'api': {
            'handlers': ['console'] if DEBUG else ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'predictions': {
            'handlers': ['console'] if DEBUG else ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Update CSRF settings to be less restrictive in development
if DEBUG:
    # In development mode, disable certain security features to make API testing easier
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_HTTPONLY = False
    CSRF_COOKIE_SAMESITE = None
    
    # Add CSRF trusted origins for development
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
        'http://localhost:3000',
        'https://osiriswatch-aqbpa6chc3brc5fe.westeurope-01.azurewebsites.net'
    ]

